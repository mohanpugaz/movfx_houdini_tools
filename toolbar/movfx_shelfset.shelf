<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <shelfSet name="shelf_set_3" label="New Shelf Set">
    <memberToolshelf name="movfx"/>
    <memberToolshelf name="movfx_dev"/>
    <memberToolshelf name="movfx_jobs"/>
    <memberToolshelf name="movfx_utd"/>
    <memberToolshelf name="hpaste_shelf"/>
    <memberToolshelf name="crowds"/>
    <memberToolshelf name="ODTOOLS"/>
    <memberToolshelf name="RenderManRIS"/>
  </shelfSet>

  <toolshelf name="movfx" label="Movfx">
    <memberTool name="new_dev"/>
    <memberTool name="tool_2"/>
    <memberTool name="save_increment"/>
    <memberTool name="explore_hip"/>
    <memberTool name="cycle_bg_scheme"/>
    <memberTool name="mantra_to_arnold_lights"/>
    <memberTool name="node_color_from_light_color"/>
    <memberTool name="add_to_gallery"/>
    <memberTool name="make_rndr_nodes"/>
    <memberTool name="object_merge"/>
    <memberTool name="mk_mtx_from_mesh"/>
    <memberTool name="b2h_cam"/>
    <memberTool name="snap_save_to_shot"/>
    <memberTool name="copy_decor"/>
    <memberTool name="save_as_code_file"/>
    <memberTool name="read_code"/>
    <memberTool name="multi_read"/>
    <memberTool name="telegram_message"/>
    <memberTool name="snap_save_to_dev"/>
    <memberTool name="edit_mats_lops"/>
  </toolshelf>

  <tool name="tool_1" label="New Tool" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[]]></script>
  </tool>

  <tool name="subnet" label="single_float_to_vector" icon="VOP_subnet">
    <helpURL>operator:Vop/subnet</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Vop/subnet</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('subnet'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_pointvop1_single_float_to_vector (Vop/subnet)
set _obj_geo1_pointvop1_single_float_to_vector = `run("opadd -e -n -v subnet single_float_to_vector")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_pointvop1_single_float_to_vector
opcolor -c 0.28999999165534973 0.56499999761581421 0.88599997758865356 $_obj_geo1_pointvop1_single_float_to_vector
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off -L off -M off -H on -E off $_obj_geo1_pointvop1_single_float_to_vector
opexprlanguage -s hscript $_obj_geo1_pointvop1_single_float_to_vector
opcf $_obj_geo1_pointvop1_single_float_to_vector

# Node $_obj_geo1_pointvop1_single_float_to_vector_floattovec2 (Vop/floattovec)
set _obj_geo1_pointvop1_single_float_to_vector_floattovec2 = `run("opadd -e -n -v floattovec floattovec2")`
oplocate -x `$arg2 + 6.1644399999999999` -y `$arg3 + -2.1409100000000003` $_obj_geo1_pointvop1_single_float_to_vector_floattovec2
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off -L off -M off -H on -E off $_obj_geo1_pointvop1_single_float_to_vector_floattovec2
opexprlanguage -s hscript $_obj_geo1_pointvop1_single_float_to_vector_floattovec2
opuserdata -n '___Version___' -v '' $_obj_geo1_pointvop1_single_float_to_vector_floattovec2

# Node $_obj_geo1_pointvop1_single_float_to_vector_null1 (Vop/null)
set _obj_geo1_pointvop1_single_float_to_vector_null1 = `run("opadd -e -n -v null null1")`
oplocate -x `$arg2 + 3.50854` -y `$arg3 + -2.21591` $_obj_geo1_pointvop1_single_float_to_vector_null1
opparm $_obj_geo1_pointvop1_single_float_to_vector_null1  outputnum ( 1 )
opparm -V 17.5.425 $_obj_geo1_pointvop1_single_float_to_vector_null1 outputnum ( 1 )
opset -d on -r on -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off -L off -M off -H on -E off $_obj_geo1_pointvop1_single_float_to_vector_null1
opexprlanguage -s hscript $_obj_geo1_pointvop1_single_float_to_vector_null1
opuserdata -n '___Version___' -v '17.5.425' $_obj_geo1_pointvop1_single_float_to_vector_null1

# Node $_obj_geo1_pointvop1_single_float_to_vector_suboutput1 (Vop/suboutput)
set _obj_geo1_pointvop1_single_float_to_vector_suboutput1 = `run("opadd -e -n -v suboutput suboutput1")`
oplocate -x `$arg2 + 8.8203399999999998` -y `$arg3 + -2.1409100000000003` $_obj_geo1_pointvop1_single_float_to_vector_suboutput1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off -L off -M off -H on -E off $_obj_geo1_pointvop1_single_float_to_vector_suboutput1
opexprlanguage -s hscript $_obj_geo1_pointvop1_single_float_to_vector_suboutput1

# Node $_obj_geo1_pointvop1_single_float_to_vector_subinput1 (Vop/subinput)
set _obj_geo1_pointvop1_single_float_to_vector_subinput1 = `run("opadd -e -n -v subinput subinput1")`
oplocate -x `$arg2 + 0.85264000000000095` -y `$arg3 + -2.2909100000000007` $_obj_geo1_pointvop1_single_float_to_vector_subinput1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off -L off -M off -H on -E off $_obj_geo1_pointvop1_single_float_to_vector_subinput1
opexprlanguage -s hscript $_obj_geo1_pointvop1_single_float_to_vector_subinput1
opcf ..
opcf $_obj_geo1_pointvop1_single_float_to_vector
oporder -e floattovec2 null1 suboutput1 subinput1 
opcf ..
opset -p on $_obj_geo1_pointvop1_single_float_to_vector

opcf $arg1
opwire -n $_obj_geo1_pointvop1_fit2 -0 $_obj_geo1_pointvop1_single_float_to_vector
opcf $_obj_geo1_pointvop1_single_float_to_vector
opwire -n $_obj_geo1_pointvop1_single_float_to_vector_null1 -0 $_obj_geo1_pointvop1_single_float_to_vector_floattovec2
opwire -n $_obj_geo1_pointvop1_single_float_to_vector_null1 -1 $_obj_geo1_pointvop1_single_float_to_vector_floattovec2
opwire -n $_obj_geo1_pointvop1_single_float_to_vector_null1 -2 $_obj_geo1_pointvop1_single_float_to_vector_floattovec2
opwire -n $_obj_geo1_pointvop1_single_float_to_vector_subinput1 -0 $_obj_geo1_pointvop1_single_float_to_vector_null1
opwire -n $_obj_geo1_pointvop1_single_float_to_vector_floattovec2 -1 $_obj_geo1_pointvop1_single_float_to_vector_suboutput1
opcf ..

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_pointvop1_single_float_to_vector
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_pointvop1_single_float_to_vector
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="extact_ar_lgt" label="extract ar light" icon="hicon:/SVGIcons.index?OBJ_light.svg">
    <script scriptType="python"><![CDATA[import hou

node = hou.selectedNodes()[0];

int = node.parm('light_intensity').eval()
exp = node.parm('light_exposure').eval()
asX = node.parm('areasize1').eval()
asY = node.parm('areasize2').eval()
posx = node.position()[0]
posy = node.position()[1] - 1

pos = [posx,posy]
print pos

context = node.parent()
arLight = context.createNode('arnold_light')


arLight.setInput(0, node)
arLight.setPosition(pos)
arLight.parm('ar_light_type').set(3)
arLight.parm('ar_intensity').set(int)
arLight.parm('ar_exposure').set(exp)
arLight.parm('ar_quad_sizex').set(asX)
arLight.parm('ar_quad_sizey').set(asY
)

print arLight
]]></script>
  </tool>

  <tool name="cache_versionUP" label="" icon="PLASMA_App">
    <script scriptType="hscript"><![CDATA[]]></script>
  </tool>

  <tool name="extract_ar_light" label="extract ar light" icon="hicon:/SVGIcons.index?OBJ_hlight.svg">
    <script scriptType="python"><![CDATA[import hou

node = hou.selectedNodes()[0];

int = node.parm('light_intensity').eval()
exp = node.parm('light_exposure').eval()
asX = node.parm('areasize1').eval()
asY = node.parm('areasize2').eval()
posx = node.position()[0]
posy = node.position()[1] - 1

pos = [posx,posy]
print(pos)

context = node.parent()
arLight = context.createNode('arnold_light')


arLight.setInput(0, node)
arLight.setPosition(pos)
arLight.parm('ar_light_type').set(3)
arLight.parm('ar_intensity').set(int)
arLight.parm('ar_exposure').set(exp)
arLight.parm('ar_quad_sizex').set(asX)
arLight.parm('ar_quad_sizey').set(asY
)

print(arLight)
]]></script>
  </tool>

  <tool name="explore_hip" label="Explore HIP" icon="hicon:/SVGIcons.index?BUTTONS_folder.svg">
    <script scriptType="python"><![CDATA[import hou
hou.ui.showInFileBrowser(hou.hipFile.path())]]></script>
  </tool>

  <tool name="cycle_bg_scheme" label="Cycle BG" icon="hicon:/SVGIcons.index?VIEW_display_background.svg">
    <script scriptType="python"><![CDATA[import movfxTools as mt
mt.cycle_display_bg()
]]></script>
  </tool>

  <tool name="reload" label="Reload Py Tools" icon="hicon:/SVGIcons.index?MISC_python_official.svg">
    <script scriptType="python"><![CDATA[import movfxTools,mo_toolbox,toolsbynodes
#movfxUTD,htip
import importlib 
importlib.reload(movfxTools)
#importlib.reload(mo_toolbox)
#importlib.reload(htip)
importlib.reload(toolsbynodes)
#importlib.reload(movfxUTD)]]></script>
  </tool>

  <tool name="reload_menus" label="Reload Menus" icon="hicon:/SVGIcons.index?BUTTONS_page_reload.svg">
    <script scriptType="hscript"><![CDATA[menurefresh]]></script>
  </tool>

  <tool name="add_to_gallery" label="Add To Gallery" icon="$MOVFXICON">
    <script scriptType="python"><![CDATA[__import__("movfxTools").add_to_gallery()    ]]></script>
  </tool>

  <tool name="new_dev" label="New Dev" icon="hicon:/SVGIcons.index?ENGINE_save_to_hip.svg">
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import movfxTools
import os
dev_root = os.getenv("HOUDINIDEV")
print(dev_root)
movfxTools.make_new_shot_shelf(dev_root)
]]></script>
  </tool>

  <tool name="make_rndr_nodes" label="Make RNDR Nodes" icon="$MOVFXICON">
    <helpText><![CDATA[creates a geo container with 
object merge pointing to the selected nodes for each node.
]]></helpText>
    <script scriptType="python"><![CDATA[__import__("movfxTools").create_rndr_nodes_from_selected()]]></script>
  </tool>

  <tool name="save_increment" label="Save Increment" icon="hicon:/SVGIcons.index?BUTTONS_increase_indent.svg">
    <script scriptType="python"><![CDATA[__import__("movfxTools").incrementally_save_file()]]></script>
  </tool>

  <tool name="open_dev" label="Open Dev" icon="$MOVFXICON">
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolSubmenu>movfx/scripts/open_dev</toolSubmenu>
    <script scriptType="python"><![CDATA[import os,hou
import webbrowser as wb

root = os.getenv("HOUDINIDEV")
wb.open(root)
#file = hou.ui.selectFile(root)
#hou.hipFile.load(file)]]></script>
  </tool>

  <tool name="viewport_update" label="Update Viewport" icon="$MOVFXICON">
    <script scriptType="python"><![CDATA[import hou
hou.ui.triggerUpdate()
]]></script>
  </tool>

  <toolshelf name="movfx_dev" label="movfx dev">
    <memberTool name="open_dev"/>
    <memberTool name="viewport_update"/>
    <memberTool name="reload"/>
    <memberTool name="reload_menus"/>
    <memberTool name="open_my_tools"/>
  </toolshelf>

  <tool name="object_merge" label="Object Merge" icon="$MOVFXICON">
    <script scriptType="python"><![CDATA[__import__("movfxTools").create_objmerge_from_selected()]]></script>
  </tool>

  <tool name="mk_mtx_from_mesh" label="Make MTX from Mesh" icon="$MOVFXICON">
    <script scriptType="python"><![CDATA[import hou
import movfxTools as mt

node = hou.selectedNodes()[0]
geo = node.geometry()
shop_path = geo.findPrimAttrib("shop_materialpath")
mat_net = node.parent().createNode("matnet",f"{node.name()}_mats")
mat_net.setPosition(mt.nodeNearPos(node))


if shop_path :
    for path in shop_path.strings() : 
        mat_name = path.split("/")[-1]
        print(mat_name)
        mat = mat_net.createNode("mtlxstandard_surface",mat_name)
else :
    print("No shop paths exist.")
    

]]></script>
  </tool>

  <tool name="b2h_cam" label="b2h_cam" icon="hicon:/SVGIcons.index?OBJ_camera.svg">
    <script scriptType="python"><![CDATA[import hou

old_cam = hou.selectedNodes()[0]
new_cam = hou.node('/obj').createNode('cam','shotcam')

parms = ["tx","ty","tz","rx","ry","rz","focal","resx","resy","aperture","fstop","focus"]

for p in parms:
    source = old_cam.parm(p)  
    dest   = new_cam.parm(p).setFromParm(source)]]></script>
  </tool>

  <toolshelf name="movfx_jobs" label="movfx jobs">
    <memberTool name="b2h_cam"/>
    <memberTool name="temp"/>
  </toolshelf>

  <tool name="open_my_tools" label="Explore Movfx Tools" icon="hicon:/SVGIcons.index?TOOLS_brush.svg">
    <script scriptType="python"><![CDATA[import os
import webbrowser as wb

path = os.getenv("movfx")
wb.open(path)]]></script>
  </tool>

  <tool name="tool_2" label="New VFX Reel" icon="hicon:/SVGIcons.index?BUTTONS_auto_save.svg">
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA["""import movfxTools 
import hou,os
proj_root = "D:/youtube_channels/pixel_pisasu/vfx_shorts"
projects = os.listdir(proj_root)
proj_name = hou.ui.selectFromList(projects)
proj_name = projects[proj_name[0]]
hip_path = proj_root+"/"+proj_name+"/"
print(hip_path)
movfxTools.make_new_shot(hip_path)"""

import movfxTools as mt
pp_reels = "D:/jobs/pp_reels"

seq_name = hou.ui.readInput("Give New Seq Name, ex: bifrost_001",title="New Seq")[1]
shot_name = hou.ui.readInput("Give shot Name, ex:sh010",title="New Shot")[1]
path = pp_reels + "/" + seq_name + "/" + shot_name
mt.make_workspace(path)

]]></script>
  </tool>

  <tool name="snap_save_to_shot" label="Snap Save to Shot" icon="hicon:/SVGIcons.index?IMAGE_snapshots.svg">
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
      <contextNetType>CHOP</contextNetType>
      <contextNetType>ROP</contextNetType>
      <contextNetType>SHOP</contextNetType>
      <contextNetType>COP2</contextNetType>
      <contextNetType>VOP</contextNetType>
      <contextNetType>VOPNET</contextNetType>
      <contextNetType>DOP</contextNetType>
      <contextNetType>TOP</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[__import__("movfxTools").snap_save_shot()



]]></script>
  </tool>

  <tool name="save_as_code_file" label="save as code" icon="hicon:/SVGIcons.index?MISC_python.svg">
    <script scriptType="python"><![CDATA[import hou

for node in hou.selectedNodes():
    name = node.name()
    strCode = node.asCode(True,True)#get code, skip defaults, recursively
    codefile =f"C:/Users/mohan/Desktop/plam_tree/v2/{name}.txt" 
    
    with open(codefile , "w") as file:  # Open the file in write mode
        file.write(strCode)
        file.close()
]]></script>
  </tool>

  <tool name="read_code" label="read_code" icon="hicon:/SVGIcons.index?MISC_python.svg">
    <script scriptType="python"><![CDATA[codefile ="C:/Users/mohan/Desktop/plam_tree/v2/mtlxmaterial.txt" 
with open(codefile, "r") as file:  # Open the file in read mode
    content = file.read()
    file.close()
exec(content) ]]></script>
  </tool>

  <tool name="multi_read" label="multi read" icon="hicon:/SVGIcons.index?MISC_python.svg">
    <script scriptType="python"><![CDATA[import os
import hou

path = "/users/mohan/tmp/nodes"
files = os.listdir(path)
for f in files:
    codefile = path + "/" + f 
    with open(codefile, "r") as file:  # Open the file in read mode
        content = file.read()
        exec(content)     
        file.close()]]></script>
  </tool>

  <tool name="tool_3" label="snapshot" icon="hicon:/SVGIcons.index?IMAGE_snapshots_old.svg">
    <script scriptType="python"><![CDATA[__import__("movfxTools").snap_save_dev()
]]></script>
  </tool>

  <shelfSet name="movfx_shelf_set" label="Movfx Shelf Set">
    <memberToolshelf name="movfx_utd"/>
    <memberToolshelf name="mohan_git"/>
    <memberToolshelf name="movfx"/>
    <memberToolshelf name="movfx_dev"/>
    <memberToolshelf name="labs_toolset"/>
    <memberToolshelf name="omni"/>
  </shelfSet>

  <tool name="mantra_to_arnold_lights" label="Mantra To Arnold Lights" icon="hicon:/SVGIcons.index?DATATYPES_lpe_tag_light.svg">
    <script scriptType="python"><![CDATA[import hou

def convert_selected_mantra_to_arnold():

    light_type_map = {
        "point": "point",
        "spot": "spot",
        "distant": "distant",
        "grid": "quad",
        "disk": "disk"
    }
    
    selected_nodes = [node for node in hou.selectedNodes()]
    
    converted_count = 0
    
    for mantra_light in selected_nodes:
        arnold_light = hou.node("/obj").createNode("arnold_light", mantra_light.name() + "_arnold")
        
        # position and rotation
        arnold_light.setWorldTransform(mantra_light.worldTransform())
        
        # Get Arnold light type based on Mantra light type
        light_type = light_type_map.get(mantra_light.parm("light_type").evalAsString(), "point")
        arnold_light.parm("ar_light_type").set(light_type)
        
        # intensity
        if mantra_light.parm("light_intensity"):
            arnold_light.parm("ar_intensity").set(mantra_light.parm("light_intensity").eval())
        
        # color
        if mantra_light.parmTuple("light_color"):
            arnold_light.parmTuple("ar_color").set(mantra_light.parmTuple("light_color").eval())
        
        # exposure if available
        if mantra_light.parm("light_exposure"):
            arnold_light.parm("ar_exposure").set(mantra_light.parm("light_exposure").eval())
        
        # size for quad light
        if light_type == "quad" and mantra_light.parmTuple("areasize"):
            arnold_light.parmTuple("ar_quad_size").set(mantra_light.parmTuple("areasize").eval())
        
        # size for disk lights (use the smaller of X and Y as radius)
        if light_type == "disk" and mantra_light.parmTuple("areasize"):
            size_x, size_y = mantra_light.parmTuple("areasize").eval()
            min_radius = min(size_x, size_y)/2
            arnold_light.parm("ar_disk_radius").set(min_radius)
        
        converted_count += 1
    
    print(f"Converted {converted_count} selected Mantra lights to Arnold lights.")

convert_selected_mantra_to_arnold()
]]></script>
  </tool>

  <tool name="node_color_from_light_color" label="Node color From Light Color" icon="hicon:/SVGIcons.index?LOP_lightfilterlibrary.svg">
    <script scriptType="python"><![CDATA[import hou

# Get the selected nodes
nodes = hou.selectedNodes()
if not nodes:
    hou.ui.displayMessage("No nodes selected!")
else:
    for node in nodes:
        # Determine the correct light color parameter
        light_parm = node.parmTuple("light_color") or node.parmTuple("ar_light_color")
        
        if light_parm:
            # Get light color parameter
            light_color = light_parm.eval()

            # Apply the color to the node
            node.setColor(hou.Color(light_color))
]]></script>
  </tool>
</shelfDocument>
